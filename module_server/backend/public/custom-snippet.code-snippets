{
    "PHP Tag": {
		"prefix": "php",
		"body": "<?php $1 ?>"
	},
	"Inline Echo": {
		"prefix": "phpp",
		"body": "<?= $$1; ?>"
	},
	"background Color": {
		"prefix": "background",
		"body": "#F7F8FF"
	},
	"Blues Color": {
		"prefix": "blues",
		"body": "#38416F"
	},
	"Blues-light Color": {
		"prefix": "blues-light",
		"body": "#646B95"
	},
	"Red Color": {
		"prefix": "red",
		"body": "#ef233c"
	},
	"Green Color": {
		"prefix": "green",
		"body": "#248277"
	},
    "Base 64 Encoder": {
        "prefix": "base64url_encode",
        "body": [
            "public static function base64url_encode($str) {",
            "        return rtrim(strtr(base64_encode($str), '+/', '-_'), '=');",
            "    }"
        ],
        "description": "Base 64 Encoder"
    },
    "Dynamic input": {
        "prefix": "dynamic-input-vue",
        "body": [
            "<div v-for=\"key in count\" :key=\"key\">\r",
            "                                <input type=\"text\" class=\"form-control mb-3\" v-model=\"form.choice[key - 1]\" :placeholder=\"'Choice ' + key\">\r",
            "                            </div>"
        ],
        "description": "dynamic input"
    },
    "dynamic-button": {
        "prefix": "dynamic-button",
        "body": [
            "addStage() {\r",
            "            this.count++;\r",
            "        },\r",
            "        removeStage() {\r",
            "            if(this.count !== 2) {\r",
            "                this.count--;\r",
            "            }\r",
            "        },"
        ],
        "description": "dynamic-button"
    },
    "vue-form": {
        "prefix": "vue-form",
        "body": [
            "form: {\r",
            "                title: null,\r",
            "                description: null,\r",
            "                deadline: null,\r",
            "                choice: []\r",
            "            }"
        ],
        "description": "vue-form"
    },
    "vue-guarded": {
        "prefix": "vue-guarded",
        "body": [
            "router.beforeEach((to, from, next) => {",
            "  const authenticate = JSON.parse(localStorage.getItem('auth'))",
            "  if(to.name !== 'login' && !authenticate) next({name: 'login'}) ",
            "  if(to.name === 'login' && authenticate) next({name: 'home'})",
            "  else next() ",
            "});"
        ],
        "description": "vue-guarded"
    },
    "vue-router": {
        "prefix": "vue-router",
        "body": [
            "import { createRouter, createWebHistory } from 'vue-router'",
            "import HomeView from '../views/HomeView.vue'",
            "",
            "const routes = [",
            "  {",
            "    path: '/',",
            "    name: 'home',",
            "    component: HomeView",
            "  },",
            "]",
            "",
            "const router = createRouter({",
            "  history: createWebHistory(process.env.BASE_URL),",
            "  routes",
            "})",
            "",
            "export default router"
        ],
        "description": "vue-router"
    },
    "vue-main": {
        "prefix": "vue-main",
        "body": [
            "import { createApp } from 'vue'\r",
            "import App from './App.vue'\r",
            "import router from './router'\r",
            "\r",
            "createApp(App).use(router).mount('#app')"
        ],
        "description": "vue-main"
    },
	"CustomJwt": {
        "prefix": "custom-jwt",
        "body": [
            "<?php\r",
            "\r",
            "namespace App;\r",
            "use App\\Models\\User;\r",
            "\r",
            "class CustomJwt {\r",
            "    public static function generate_jwt($data) {\r",
            "        $secret = env('APP_KEY');\r",
            "        $headers = [\r",
            "            'alg' => 'HS256',\r",
            "            'type' => 'JWT'\r",
            "        ];\r",
            "\r",
            "        $payload = [\r",
            "            \"sub\" => \"token\",\r",
            "            \"exp\" => time() + 3600,\r",
            "            \"aud\" => $data->id,\r",
            "            \"role\" => $data->role\r",
            "        ];\r",
            "\r",
            "        $headers_encoded = User::base64url_encode(json_encode($headers));\r",
            "        $payload_encoded = User::base64url_encode(json_encode($payload));\r",
            "\r",
            "        $signature =  hash_hmac('SHA256', \"$headers_encoded.$payload_encoded\", $secret, true);\r",
            "        $signature_encoded =  User::base64url_encode($signature);\r",
            "\r",
            "        $jwt = \"$headers_encoded.$payload_encoded.$signature_encoded\";\r",
            "\r",
            "        return $jwt;\r",
            "    }\r",
            "\r",
            "    public static function getUser($jwt) {\r",
            "        $tokenParts = explode('.', $jwt);\r",
            "        $payload = base64_decode($tokenParts[1]);\r",
            "\r",
            "        return json_decode($payload);\r",
            "    }\r",
            "\r",
            "    public static function is_jwt_valid($jwt) {\r",
            "        $secret = env('APP_KEY');\r",
            "        // split the jwt\r",
            "        $tokenParts = explode('.', $jwt);\r",
            "        $header = base64_decode($tokenParts[0]);\r",
            "        $payload = base64_decode($tokenParts[1]);\r",
            "        $signature_provided = $tokenParts[2];\r",
            "    \r",
            "        // check the expiration time - note this will cause an error if there is no 'exp' claim in the jwt\r",
            "        $expiration = json_decode($payload)->exp;\r",
            "        $is_token_expired = ($expiration - time()) < 0;\r",
            "    \r",
            "        // build a signature based on the header and payload using the secret\r",
            "        $base64_url_header = User::base64url_encode($header);\r",
            "        $base64_url_payload = User::base64url_encode($payload);\r",
            "        $signature = hash_hmac('SHA256', $base64_url_header . \".\" . $base64_url_payload, $secret, true);\r",
            "        $base64_url_signature = User::base64url_encode($signature);\r",
            "    \r",
            "        // verify it matches the signature provided in the jwt\r",
            "        $is_signature_valid = ($base64_url_signature === $signature_provided);\r",
            "        \r",
            "        if ($is_token_expired || !$is_signature_valid) {\r",
            "            return FALSE;\r",
            "        } else {\r",
            "            return TRUE;\r",
            "        }\r",
            "    }\r",
            "}"
        ],
    },
    "calculate": {
        "prefix": "calculate",
        "body": [
            "if(count((array)$poll) == 0) return response()->json(['message' => null], 200);",
            "",
            "        $result = Vote::where('poll_id', $poll->id);",
            "        $option_list = Choice::where('poll_id', $poll->id)->get();",
            "",
            "        $total_data = $result->count();",
            "        ",
            "        $percentage = [];",
            "        foreach ($option_list as $choice) {",
            "            $count = $result->get()->where('choice_id', $choice->id)->count();",
            "",
            "            array_push($percentage, [",
            "                'id' => $choice->id, ",
            "                'choice' => $choice->choice,",
            "                'point' => 2 / (1 + 1) * 100",
            "                // 'point' => $total_data == 0 ? 0 : ($count / $total_data) * 100",
            "            ]);",
            "        }",
            "",
            "        return response()->json([",
            "            'id' => $poll->id,",
            "            'title' => $poll->title,",
            "            'description' => $poll->description,",
            "            'deadline' => $poll->deadline,",
            "            'created_by' => $poll->author,",
            "            'creator' => $poll->users->username,",
            "            'result' => $percentage,",
            "            'choices' => $option_list",
            "        ], 200);"
        ],
    },
    "JWTSubject": {
        "prefix": "JWTSubject",
        "body": [
            "use Tymon\\JWTAuth\\Contracts\\JWTSubject;"
        ],
        "description": "namespace JWT"
    },
    "JWT Requirement": {
        "prefix": "JWTIdentifier",
        "body": [
            "public function getJWTIdentifier() {",
            "        return $this->getKey();",
            "    }",
            "",
            "    public function getJWTCustomClaims() {",
            "        return [];",
            "    }"
        ],
        "description": "requirement jwt"
    },
    "blankslate-header": {
        "prefix": "blankslate-header",
        "body": [
            "#header {",
            "    display: flex;",
            "    justify-content: space-between;",
            "    align-items: center;",
            "    flex-wrap: wrap;",
            "    padding: 10px 20px;",
            "    background-color: var(--white);",
            "    box-shadow: var(--shadow);",
            "    /* position: fixed;",
            "    z-index: 999;",
            "    top: 0;",
            "    left: 0;",
            "    right: 0; */",
            "}",
            "",
            "#site-title h1 a {",
            "    font-size: 1.5em;",
            "    font-weight: bold;",
            "    color: var(--main);",
            "}",
            "",
            "#site-description {",
            "    font-size: 1.1em;",
            "    color: var(--sub);",
            "}",
            "",
            "#menu .menu ul {",
            "    display: flex;",
            "    gap: 8px;",
            "}",
            "",
            "#menu .menu ul li a {",
            "    color: var(--main);",
            "    text-decoration: none;",
            "}"
        ],
        "description": "blankslate header"
    },
    "blankslate-container": {
        "prefix": "blankslate-container",
        "body": [
            "#container {",
            "    margin: 30px auto;",
            "    padding: 10px 20px;",
            "    display: grid;",
            "    grid-template-columns: 1fr 1fr;",
            "}",
            "",
            "/* Content */",
            "",
            "#content {",
            "    padding: 10px 20px;",
            "}",
            "",
            "#content article {",
            "    padding: 10px 20px;",
            "    background-color: var(--white);",
            "    box-shadow: var(--shadow);",
            "    border-radius: 5px;",
            "}",
            "",
            "#content header {",
            "    margin-bottom: 5px;",
            "    color: var(--sub);",
            "}",
            "",
            "#content header > * {",
            "    margin-bottom: 3px;",
            "}",
            "",
            "#content header .entry-title a {",
            "    font-size: 1.5em;",
            "    color: var(--main);",
            "}",
            "",
            "#content header h1.entry-title {",
            "    font-size: 1.6em;",
            "    color: var(--main);",
            "    text-align: center;",
            "    margin-bottom: 10px;",
            "}",
            "",
            "#content header .post-edit-link {",
            "    display: block;",
            "    color: var(--red);",
            "}",
            "",
            "#content .entry-summary p {",
            "    color: var(--sub);",
            "}",
            "#content .entry-content {",
            "    margin: 5px 0;",
            "}"
        ],
        "description": "blankslate-container"
    },
    "blankslate-sidebar": {
        "prefix": "blankslate-sidebar",
        "body": [
            "#sidebar {",
            "    padding: 10px 20px;",
            "}",
            "",
            ".xoxo > * {",
            "    margin-bottom: 15px;",
            "}",
            "",
            ".wp-block-search__label {",
            "    margin-bottom: 5px;",
            "}",
            "",
            ".wp-block-search__inside-wrapper input {",
            "    outline: none;",
            "    border-radius: 5px;",
            "}",
            ".wp-block-search__inside-wrapper button {",
            "    outline: none;",
            "    cursor: pointer;",
            "    border-radius: 5px;",
            "    background-color: var(--main);",
            "    color: var(--white);",
            "}",
            "",
            ".wp-block-group__inner-container h2 {",
            "    font-size: 1.3em;",
            "    margin-bottom: 3px;",
            "}"
        ],
        "description": "blankslate-sidebar"
    },
    "blankslate-contact-form": {
        "prefix": "blankslate-contact-form",
        "body": [
            ".wpcf7-form.init > p {",
            "    margin-bottom: 10px;",
            "}",
            "",
            "#name-form, #email-form, #subject-form, #textarea-form, #submit-form {",
            "    border: 1px solid var(--sub);",
            "    padding: 5px 10px;",
            "    border-radius: 5px;",
            "    outline: none;",
            "}",
            "",
            "input#submit-form {",
            "    border: 1px solid var(--main);",
            "    color: var(--main);",
            "    letter-spacing: 1px;",
            "    font-size: 1.1em;",
            "    background-color: var(--white);",
            "}",
            "",
            "#submit-form:hover {",
            "    background-color: var(--main);",
            "    color: var(--white);",
            "}",
            "",
            ".wpcf7-response-output {",
            "    border: 2px solid var(--red) !important;",
            "}"
        ],
        "description": "blankslate-contact-form"
    }
}